============= Dev Next branch (AffineUnits) =============
(1)  Unit lookup for MeasInfo (cross validate during build if TagInfo or MeasInfo are missing tags)

(2)  Fully test for new AffineUnits update

============= DEV branch (Query results) =============
(1) Build query functions for PlantState and PlantSeries (values and stdevs) for main states (stream components, reactions etc)
     -  build out timeseries querying functions
           -   define getmeasurement(plant, measid), getstream(plant, streamid, component), getnode(plant, nodeid, component)
           -   these don't need to be performant, we can even iterate through the lists if need be
           -   stream variances are state standard deviations, others are measurement deviations
     -  produce a timeseries
           -   may want to extend TimeRecord for numerical operations like +-*/ and various univariate functions
           -   see what is implemented in https://github.com/JuliaLang/julia/blob/master/base/complex.jl





============= Port to parent "Carbon" application ====================
(1) Develop workflow for model construction
     -  Prepare the global indexer ref to be used for all JSONs
     -  From JSON, Build Dict{Symbol, StreamInfo{L,String,N}} (t, p, moles are tags to pull from tagdict)
     -  From JSON, Build Vector{AbstractMeas{L,String,N}} (value is the tag to pull from the tagdict)
     -  From JSON, Build Vector{NodeInfo}{L,N} (no tags required, but reactions need to be parsed)


============= Future enancements ====================
(1) Add VolumeDensMeas
     -  Like VolumeFlowMeas but instead of (V,T,P) fields, we have (V,D)
     -  Useful for liquids with known density (often density is assumed and not measured)

(2) Nullable stream indexing
     -  When we know that a certain component is zero, we don't need to add it to the state
     -  A nullable species indexer will return zero for all indices that are "nothing"
     -  A nullable species indexer will not set any values for all indices that are "nothing"
     -  This may be a simpler than Node-Merging below if there are only a couple of odd streams (like fuel)

(3) Merge different mass balance systems with different component lists
     -  Used to make the high-level model O(2N) instead of O(N^3)
          -  Creates a "tuple" of plants
     -  Solves each plant separately
          -  Each plant's external streams has a MolarFlowEstimate (new measurement)
          -  These are ignored during the first run 
     -  MolareFlowEstimates are combined based off adjacent systems
          -  Variances are diagonal to speed up inference
          -  Each plant is solved once more with these new observations 
