(1) Measurement Indexers start off with "String" parametric type (for looking up raw data tags)

(2) Instantiation comes with new data
     -  Raw measurements
     -  Local thermodynamic optimizations (i.e. specific volume)
     -  Internal instantiated expressions 
            stream = instantiate(streamind, x::AbstractVector)
            err = y - f(stream)
     -  Generate a vector of function wrappers for innovations (z(x) = y - f(x)) (including stdev)
            This includes all of the balance innovations

(3) Optimize over function wrappers divided by stdev

(4) Use the sparse independent covariance update procedure
     -  Build an state index generator for every measurement type
     -  Sparse gradients (to obtain observation matrix C) for each measurement
     -  Only update covariance along index

(Move GhsSpecies object outside of the package, into parennt environment)
(O1) Create specific Species types 
     -  GhGSpecies{T} = Species{(:CO2, :CH4, :N2O, :Other), T, 4}
     -  AnalyzerSpecies{T} = Species{(...), T, length(...)}
(O2) Create a method to collapse AnalyzerSpecies to GhGSpecies
     -  gases = species(GhGSpecies)
     -  gastuple = map(gas-> get(analyzerspecies, gas, zero(T)), gases)
     -  ghgtuple = (gastuple[begin:(end-1)]..., sum(analyzerspecies) - sum(gastuple[begin:(end-1)]))
     -  return GhGSpecies{T}(ghgtuple)
(O3) Use these collapse methods to create methods to get attributes like
     -  molar_volumes(GhgSpecies, model, streaminfo)
     -  molar_weights(GhGSpecies, model, streaminfo)