(1) Develop workflow for model construction
     -  Prepare the global indexer ref to be used for all JSONs
     -  From JSON, Build Dict{Symbol, StreamInfo{L,String,N}} (t, p, moles are tags to pull from tagdict)
     -  From JSON, Build Vector{AbstractMeas{L,String,N}} (value is the tag to pull from the tagdict)
     -  From JSON, Build Vector{NodeInfo}{L,N} (no tags required, but reactions need to be parsed)

(2) Develop workflow for value population
     -  Grab StreamInfo data from the tagdict and calculate the thermodynamic properties
     -  Use thermodynamic properties to populate AbstractMeas{L,String,N}
     -  Use tagdict to fill values of AbstractMeas{L,String,N}

(3) Optimize over negloglik() (standardized SSE)
     -  Run the optimization algorithm over negloglik (on measurements and balances)
     -  Use the Kalman update on innovtation

(4) Use the sparse independent covariance update procedure
     -  Build an state index generator for every measurement type
     -  Sparse gradients (to obtain observation matrix C) for each measurement
     -  Only update covariance along index

(Move GhsSpecies object outside of the package, into parennt environment)
(O1) Create specific Species types 
     -  GhGSpecies{T} = Species{(:CO2, :CH4, :N2O, :Other), T, 4}
     -  AnalyzerSpecies{T} = Species{(...), T, length(...)}
(O2) Create a method to collapse AnalyzerSpecies to GhGSpecies
     -  gases = species(GhGSpecies)
     -  gastuple = map(gas-> get(analyzerspecies, gas, zero(T)), gases)
     -  ghgtuple = (gastuple[begin:(end-1)]..., sum(analyzerspecies) - sum(gastuple[begin:(end-1)]))
     -  return GhGSpecies{T}(ghgtuple)
(O3) Use these collapse methods to create methods to get attributes like
     -  molar_volumes(GhgSpecies, model, streaminfo)
     -  molar_weights(GhGSpecies, model, streaminfo)